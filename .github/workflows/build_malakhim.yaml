name: Build Malachim release zip

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: "Publish as prerelease?"
        type: boolean
        default: true
      draft:
        description: "Create as draft?"
        type: boolean
        default: false
      make_latest:
        description: "Mark as latest?"
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  zip:
    runs-on: ubuntu-latest
    steps:
      # ---- Checkout repo ----
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---- Ensure tools (zip, jq, rsync) ----
      - name: Ensure tools (zip, jq, rsync)
        shell: bash
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y zip jq rsync

      # ---- Read version from .TOC (case-insensitive; root or Malachim/) ----
      - name: Read version from .TOC
        id: ver
        shell: bash
        run: |
          set -e
          TOC_PATH=""
          for p in "Malachim/Malachim.toc" "Malachim/Malachim.TOC" "Malachim.toc" "Malachim.TOC"; do
            if [ -f "$p" ]; then TOC_PATH="$p"; break; fi
          done

          if [ -z "$TOC_PATH" ]; then
            echo "No .TOC found; defaulting to 0.0.0"
            echo "ADDON_VER=0.0.0" >> "$GITHUB_ENV"
            echo "TOC_PATH=" >> "$GITHUB_ENV"
          else
            VER=$(awk 'BEGIN{IGNORECASE=1} /^##[[:space:]]*Version[[:space:]]*:/ {sub(/^[^:]*:[[:space:]]*/,""); print; exit}' "$TOC_PATH")
            [ -z "$VER" ] && VER="0.0.0"
            VER=$(printf '%s' "$VER" | tr -cd '0-9A-Za-z._-')
            echo "Detected version: $VER (from $TOC_PATH)"
            echo "ADDON_VER=$VER" >> "$GITHUB_ENV"
            echo "TOC_PATH=$TOC_PATH" >> "$GITHUB_ENV"
          fi

      # ---- Stage addon files only (no git metadata) ----
      - name: Stage addon files
        shell: bash
        run: |
          set -e
          STAGE="dist/Malachim"
          mkdir -p "$STAGE"

          rsync -av --prune-empty-dirs \
            --include='Malachim.toc' --include='Malachim.TOC' \
            --include='*.lua' --include='*.xml' \
            --include='*.blp' --include='*.tga' --include='*.dds' --include='*.mdx' \
            --include='*.mp3' --include='*.ogg' --include='*.wav' \
            --include='README.md' \
            --include='Media/**' --include='Locales/**' --include='Textures/**' --include='Icons/**' --include='Images/**' \
            --include='Fonts/**' --include='Sound/**' --include='Libs/**' --include='Modules/**' \
            --include='*/' \
            --exclude='*' \
            ./ "$STAGE/"

          echo "Staged contents:"
          find dist -maxdepth 3 -type f -print

          # Robust .toc presence test
          if [ -n "${TOC_PATH:-}" ]; then
            TOC_BASE="$(basename "$TOC_PATH")"
            if [ ! -f "$STAGE/$TOC_BASE" ]; then
              echo "ERROR: expected $TOC_BASE in $STAGE but it wasn't found."
              ls -l "$STAGE" || true
              exit 1
            fi
          else
            if ! ls "$STAGE"/Malachim.[Tt][Oo][Cc] >/dev/null 2>&1; then
              echo "ERROR: .toc not found in $STAGE (looked for Malachim.[Tt][Oo][Cc])"
              ls -l "$STAGE" || true
              exit 1
            fi
          fi

      # ---- Compose release notes (from VERSION if present) ----
      - name: Compose release notes (from VERSION if present)
        shell: bash
        run: |
          set -e
          mkdir -p dist

          TITLE="Malachim v${ADDON_VER}"
          DATE_UTC="$(date -u +%Y-%m-%d)"
          PREV_TAG="$(git describe --tags --abbrev=0 --match 'v*' 2>/dev/null || true)"

          # Defaults
          LABEL=""; SUMMARY=""; FEATURES=""; FIXES=""; CHANGES=""
          KNOWN=""; COMPAT=""; THANKS=""

          if [ -f VERSION ]; then
            LABEL="$(jq -r '.label // empty' VERSION || true)"
            SUMMARY="$(jq -r '.summary // .notes // empty' VERSION || true)"
            FEATURES="$(jq -r 'if (.features // empty)=="" then "" else (.features|if type=="array" then map("- "+.)|join("\n") else "- "+tostring(.) end) end' VERSION || true)"
            FIXES="$(jq -r 'if (.fixes // empty)=="" then "" else (.fixes   |if type=="array" then map("- "+.)|join("\n") else "- "+tostring(.) end) end' VERSION || true)"
            CHANGES="$(jq -r 'if (.changes // empty)=="" then "" else (.changes|if type=="array" then map("- "+.)|join("\n") else "- "+tostring(.) end) end' VERSION || true)"
            KNOWN="$(jq -r 'if (.known_issues // empty)=="" then "" else (.known_issues|if type=="array" then map("- "+.)|join("\n") else "- "+tostring(.) end) end' VERSION || true)"
            COMPAT="$(jq -r 'if (.compat // empty)=="" then "" else (.compat|if type=="array" then map("- "+.)|join("\n") else "- "+tostring(.) end) end' VERSION || true)"
            THANKS="$(jq -r 'if (.thanks // empty)=="" then "" else (.thanks|if type=="array" then map("- "+.)|join("\n") else "- "+tostring(.) end) end' VERSION || true)"
          fi

          COMMITS=""
          if [ -z "$FEATURES$FIXES$CHANGES" ] && [ -n "$PREV_TAG" ]; then
            COMMITS="$(git log --pretty='- %s (%h)' "${PREV_TAG}..HEAD" || true)"
          fi

          if [ -n "$LABEL" ]; then RELEASE_NAME="${TITLE} (${LABEL})"; else RELEASE_NAME="${TITLE}"; fi
          echo "RELEASE_NAME=$RELEASE_NAME" >> "$GITHUB_ENV"

          {
            echo "# ${RELEASE_NAME}"
            echo
            echo "_Build date:_ ${DATE_UTC}"
            echo
            [ -n "$SUMMARY" ] && { echo "$SUMMARY"; echo; }
            [ -n "$FEATURES" ] && { echo "## Features"; echo "$FEATURES"; echo; }
            [ -n "$FIXES" ]    && { echo "## Fixes";    echo "$FIXES";    echo; }
            [ -n "$CHANGES" ]  && { echo "## Changes";  echo "$CHANGES";  echo; }
            [ -n "$COMMITS" ]  && { echo "## Commits since ${PREV_TAG}"; echo "$COMMITS"; echo; }
            echo "## Compatibility"
            if [ -n "$COMPAT" ]; then
              echo "$COMPAT"
            else
              echo "- Turtle WoW (Classic 1.12.x / 11200)"
              echo "- Lua 5.0"
            fi
            echo
            echo "## Installation"
            echo "1. Download the zip attached below."
            echo "2. Unzip so the folder **Malachim/** sits in your \`Interface/AddOns/\` directory."
            echo "3. Restart the client or type \`/reload\`."
            [ -n "$KNOWN" ] && { echo; echo "## Known Issues"; echo "$KNOWN"; }
            [ -n "$THANKS" ] && { echo; echo "## Thanks"; echo "$THANKS"; }
          } > dist/RELEASE_NOTES.md

          echo "---- RELEASE_NOTES.md ----"
          sed -n '1,200p' dist/RELEASE_NOTES.md

      # ---- Place notes (and VERSION) inside addon folder (optional) ----
      # If you want the files shipped INSIDE the Malachim/ folder, keep this step.
      # Remove this step if you prefer the zip to contain only game files.
      - name: Add notes/VERSION into Malachim folder (optional)
        shell: bash
        run: |
          set -e
          cp dist/RELEASE_NOTES.md dist/Malachim/RELEASE_NOTES.txt
          [ -f VERSION ] && cp VERSION dist/Malachim/VERSION.json || true

      # ---- Zip (folder inside = Malachim/) ----
      - name: Package zip
        shell: bash
        run: |
          set -e
          ZIP="Malachim-v${ADDON_VER}-release.zip"
          ( cd dist && zip -r9 "../$ZIP" "Malachim" )
          ls -l "$ZIP"
          echo "ZIP_NAME=$ZIP" >> "$GITHUB_ENV"

      # ---- Upload artifact (Actions) ----
      - name: Upload artifact (Actions)
        uses: actions/upload-artifact@v4
        with:
          name: Malachim-v${{ env.ADDON_VER }}-release
          path: ${{ env.ZIP_NAME }}

      # ---- Create GitHub Release (with custom notes & extra asset) ----
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.ADDON_VER }}
          name: ${{ env.RELEASE_NAME }}
          body_path: dist/RELEASE_NOTES.md
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}
          make_latest: ${{ inputs.make_latest }}
          files: |
            ${{ env.ZIP_NAME }}
            dist/RELEASE_NOTES.md
